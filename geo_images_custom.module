<?php

/**
 * @file
 * Contains geo_images_custom.module.
 */

use Drupal\views\Plugin\views\query\Sql;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\media\Entity\Media;
use Drupal\media\MediaInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Field\FieldItemList;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\file\FileInterface;
use Drupal\Core\Field\FieldConfigInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Config\Entity\ThirdPartySettingsInterface;
use Symfony\Component\Yaml\Parser;
use Symfony\Component\Yaml\Yaml;
use Drupal\views\ResultRow;
use Drupal\views\Plugin\views\ViewsPluginInterface;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_page_attachments().
 */
function geo_images_custom_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'geo_images_custom/common';
}

/**
 * Implements hook_entity_base_field_info().
 *
 * Generate the Geoimage Caption computed field.
 */
function geo_images_custom_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'media') {
    // Add a field that generates the Link to Google Maps location.
    $fields['geofield_googlemaps_link'] = BaseFieldDefinition::create('link')
      ->setName('geofield_googlemaps_link')
      ->setLabel(t('Geofield Google Maps Link'))
      ->setCardinality(-1)
      ->setComputed(TRUE)
      ->setClass('\Drupal\geo_images_custom\GeofieldGoogleMapsLinkFieldItemList')
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'region' => 'hidden',
      ]);
  }
  return $fields;
}

/**
 * Implements hook_views_data_alter().
 */
function geo_images_custom_views_data_alter(array &$data) {
  // Add the Geofield Google Maps Link field to Views.
  if (isset($data['media'])) {
    $data['media']['geofield_googlemaps_link'] = [
      'title' => t('Geofield Google Maps Link'),
      'field' => [
        'id' => 'field',
        'default_formatter' => 'link',
        'field_name' => 'geofield_googlemaps_link',
      ],
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Generate Geoimage Node with referenced Geo Image Media, each time
 * a Geo Image Media is generated with 'field_generate_host_content' value equal
 * to TRUE.
 */
function geo_images_custom_media_insert(MediaInterface $media) {

  // If the Media is a Geoimage with a Geofield not empty
  // (it means it was Geo-Located correctly).
  if ($media->bundle() === "geo_image" && !empty($media->field_geofield->value)) {

    // If Media Geoimage Media needs to create a host Geoimage Node.
    if ($media->field_generate_host_content->value) {
      $user = \Drupal::currentUser();

      $media_image_data = $media->get('field_media_image')->getValue();
      $file_url = parse_url($media_image_data[0]['value'], PHP_URL_PATH);

      // Create the Geo Image Node data, with field_geo_image_media referencing.
      // the created Geo Image Media.
      $geoimage_node_data = [
        'type' => "geo_image",
        // Generate a Title that comes from the Geocoded Media Address or as
        // Media Image Url name.
        'title' => $media->field_address->value ?? basename($file_url),
        'uid' => $user->id(),
        'status' => 1,
        'langcode' => \Drupal::service('language_manager')->getDefaultLanguage()->getId(),
        'field_geo_image_media' => [
          [
            'target_id' => $media->id(),
          ],
        ],
      ];

      // Create/Save the Geoimage Node, with Geoimage Paragraph/Geoimage Media.
      $geoimage_node = Node::create($geoimage_node_data);
      try {
        $geoimage_node->save();
      }
      catch (\Exception $e) {
        \Drupal::logger('geo_images_custom - media_library_importer')->error($e->getMessage());
      }
    }
  }
  // Otherwise if the Media is a Geoimage not Geo-Located (geofield is empty),
  // then we delete it (and its source file) and log consequently.
  elseif ($media->bundle() === "geo_image" && empty($media->field_geofield->value)) {
    \Drupal::logger('geo_images_custom - media_library_importer')->warning("Geoimage '{$media->label()}' couldn't be Geo-Located and is being deleted");
    try {
      // Remove the Geoimage Media (not Geo-Located).
      $media->delete();
      // Also remove the source file that couldn't be geo-located
      // (missing EXIF geo info).
      $file_uri = $media->field_media_image->value;
      if (!empty($file_uri)) {
        unlink($media->field_media_image->value);
      }
    }
    catch (\Exception $e) {
      \Drupal::logger('geo_images_custom - media_library_importer')->error($e->getMessage());
    }
  }
}

/**
 * Implements hook_alter_media_library_importer_media_extra_fields().
 */
function geo_images_custom_alter_media_library_importer_media_extra_fields(FileInterface $file, string $file_url, string $uri, array &$extra_fields) {
   // Set to TRUE the generate_host_content field/property.
  $extra_fields['field_generate_host_content'] = TRUE;
}

/**
 * Returns leaflet map default settings.
 */
function geo_images_custom_leaflet_map_default_settings(): array {
  return [
    'dragging' => TRUE,
    'touchZoom' => TRUE,
    'scrollWheelZoom' => TRUE,
    'doubleClickZoom' => TRUE,
    'zoomControl' => TRUE,
    'attributionControl' => TRUE,
    'trackResize' => TRUE,
    'fadeAnimation' => TRUE,
    'zoomAnimation' => TRUE,
    'closePopupOnClick' => TRUE,
    'minZoom' => 2,
    'maxZoom' => 20,
    'zoom' => 15,
    'layerControl' => FALSE,
    'layerControlOptions' => [
      'position' => 'topright',
      'collapsed' => TRUE,
    ],
    'worldCopyJump' => TRUE,
  ];
}

/**
 * Implements hook_leaflet_map_info().
 */
function geo_images_custom_leaflet_map_info(): array {
  $map_info = [
    'Stamen_Terrain' => [
      'label' => 'Stamen_Terrain',
      'description' => t('Leaflet Stamen_Terrain map.'),
      'settings' => geo_images_custom_leaflet_map_default_settings(),
      'layers' => [
        'earth' => [
          'urlTemplate' => 'https://tiles.stadiamaps.com/tiles/stamen_terrain/{z}/{x}/{y}.jpg',
          'options' => [
            "minZoom" => 0,
            "maxZoom" => 18,
            "ext" => "png",
            "subdomains" => "abcd",
            "attribution" => '&copy; <a href="https://stadiamaps.com/" target="_blank">Stadia Maps</a> <a href="https://stamen.com/" target="_blank">&copy; Stamen Design</a> &copy; <a href="https://openmaptiles.org/" target="_blank">OpenMapTiles</a> &copy; <a href="https://www.openstreetmap.org/about" target="_blank">OpenStreetMap</a> contributors',
          ],
        ],
      ],
      // Uncomment the lines below to use a custom icon.
      'icon' => [
        'iconUrl'       => '/sites/default/files/geofieldmap_icons_old/marker_red.png',
        'iconSize'      => ['x' => '20', 'y' => '20'],
        'iconAnchor'    => ['x' => '20', 'y' => '20'],
        'popupAnchor'   => ['x' => '-8', 'y' => '-32'],
        'shadowUrl'     => '/sites/default/files/geofieldmap_icons_old/marker_red.png',
        'shadowSize'    => ['x' => '25', 'y' => '27'],
        'shadowAnchor'  => ['x' => '0', 'y' => '27'],
      ],
      // Enable and configure plugins in the plugins array.
      'plugins' => [],
    ],
  ];

  // Add some map definitions from the D7 leaflet_more_maps module.
  // OpenStreetMap OSM Mapnik classic map is available via leaflet.module.
  $map_info['multilayers'] = [
    'label' => 'Multilayers',
    'description' => t('Multilayers'),
    'settings' => geo_images_custom_leaflet_map_default_settings(),
    'layers' => [
      'Stadia Alidade Smooth' => [
        'type' => 'vector',
        'urlTemplate' => 'https://tiles.stadiamaps.com/styles/alidade_smooth.json',
        'options' => [
          'attribution' => '&copy; <a href="https://stadiamaps.com/">Stadia Maps</a>, &copy; <a href="https://openmaptiles.org/">OpenMapTiles</a> &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors',
        ],
      ],
      'Stamen_Terrain' => [
        'urlTemplate' => 'https://tiles.stadiamaps.com/tiles/stamen_terrain/{z}/{x}/{y}.jpg',
        'options' => [
          "minZoom" => 0,
          "maxZoom" => 18,
          "ext" => "png",
          "subdomains" => "abcd",
          "attribution" => '&copy; <a href="https://stadiamaps.com/" target="_blank">Stadia Maps</a> <a href="https://stamen.com/" target="_blank">&copy; Stamen Design</a> &copy; <a href="https://openmaptiles.org/" target="_blank">OpenMapTiles</a> &copy; <a href="https://www.openstreetmap.org/about" target="_blank">OpenStreetMap</a> contributors'
        ],
      ],
      'OpenStreetMap' => [
        'urlTemplate' => 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
        'options' => [
          "maxZoom" => 19,
          "attribution" => "&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors",
        ],
      ],
      'Stadia Alidade Dark' => [
        'type' => 'vector',
        'urlTemplate' => 'https://tiles.stadiamaps.com/styles/alidade_smooth_dark.json',
        'options' => [
          'attribution' => '&copy; <a href="https://stadiamaps.com/">Stadia Maps</a>, &copy; <a href="https://openmaptiles.org/">OpenMapTiles</a> &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors',
        ],
      ],
      'OpenRailwayMap' => [
        'layer_type' => 'overlay',
        'layer_hidden' => TRUE,
        'urlTemplate' => 'https://tiles.openrailwaymap.org/standard/{z}/{x}/{y}.png',
        'options' => [
          "maxZoom" => 19,
          'attribution' => 'Map data: &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors | Map style: &copy; <a href="https://www.OpenRailwayMap.org">OpenRailwayMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)',
        ],
      ],
      // Google Maps Tiles in Leaflet.
      // @see https://stackoverflow.com/questions/41739753/how-to-correctly-use-google-maps-static-tiles-with-leaflet
      'Google Roads' => [
        'type' => 'google',
        'urlTemplate' => '//mt{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}',
        'options' => [
          'attribution' => 'Map data &copy; <a href="https://googlemaps.com">Google</a>',
          'detectRetina' => FALSE,
          'subdomains' => [0, 1, 2, 3],
        ],
      ],
      'Google Hybrid' => [
        'type' => 'google',
        'urlTemplate' => '//mt{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}',
        'options' => [
          "minZoom" => 0,
          "maxZoom" => 20,
          'attribution' => 'Map data &copy; <a href="http://googlemaps.com">Google</a>',
          'detectRetina' => FALSE,
          'subdomains' => ['0', '1', '2', '3'],
        ],
      ],
      'Map Tiler Aquarelle' => [
        'urlTemplate' => 'https://api.maptiler.com/maps/aquarelle/{z}/{x}/{y}.png?key=OIQHXCpngQEP6dfvC5nq',
        'options' => [
          "tileSize" => 512,
          "zoomOffset" => -1,
          "minZoom" => 0,
          "maxZoom" => 22,
          'attribution' => "\u003ca href=\"https://www.maptiler.com/copyright/\" target=\"_blank\"\u003e\u0026copy; MapTiler\u003c/a\u003e \u003ca href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\"\u003e\u0026copy; OpenStreetMap contributors\u003c/a\u003e",
          'crossOrigin' => TRUE,
        ],
      ],
      'Map Tiler Backdrop' => [
        'urlTemplate' => 'https://api.maptiler.com/maps/backdrop/{z}/{x}/{y}.png?key=OIQHXCpngQEP6dfvC5nq',
        'options' => [
          "tileSize" => 512,
          "zoomOffset" => -1,
          "minZoom" => 0,
          "maxZoom" => 22,
          'attribution' => "\u003ca href=\"https://www.maptiler.com/copyright/\" target=\"_blank\"\u003e\u0026copy; MapTiler\u003c/a\u003e \u003ca href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\"\u003e\u0026copy; OpenStreetMap contributors\u003c/a\u003e",
          'crossOrigin' => TRUE,
        ],
      ],
    ],
  ];

  return $map_info;
}
